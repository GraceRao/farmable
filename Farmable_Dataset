-- Create Buyers table
CREATE TABLE Buyers (
    buyer_id INT PRIMARY KEY AUTO_INCREMENT,
    buyer_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(15),
    address TEXT
);

-- Create Farmers table
CREATE TABLE Farmers (
    farmer_id INT PRIMARY KEY AUTO_INCREMENT,
    farmer_name VARCHAR(255) NOT NULL,
    business_name VARCHAR(255),
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(15),
    address TEXT,
    farmer_description TEXT
);

-- Create Categories table
CREATE TABLE Categories (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    category_name VARCHAR(255) NOT NULL,
    parent_category INT NULL,
    FOREIGN KEY (parent_category) REFERENCES Categories(category_id)
);

-- Create Inventory table
CREATE TABLE Inventory (
    item_id INT PRIMARY KEY AUTO_INCREMENT,
    farmer_id INT NOT NULL,
    item_name VARCHAR(255) NOT NULL,
    item_category INT NOT NULL,
    quantity_available INT DEFAULT 0,
    unit_price DECIMAL(10, 2) NOT NULL,
    description TEXT,
    date_added DATE,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (farmer_id) REFERENCES Farmers(farmer_id),
    FOREIGN KEY (item_category) REFERENCES Categories(category_id)
);

-- Create Orders table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    buyer_id INT NOT NULL,
    farmer_id INT NOT NULL,
    item_id INT NOT NULL,
    order_date DATE NOT NULL,
    quantity INT NOT NULL,
    total_price DECIMAL(10, 2) NOT NULL,
    order_status VARCHAR(50) DEFAULT 'Pending',
    payment_id VARCHAR(255),
    FOREIGN KEY (buyer_id) REFERENCES Buyers(buyer_id),
    FOREIGN KEY (farmer_id) REFERENCES Farmers(farmer_id),
    FOREIGN KEY (item_id) REFERENCES Inventory(item_id)
);

-- Create Date table
CREATE TABLE Date (
    date_id INT PRIMARY KEY AUTO_INCREMENT,
    date DATE NOT NULL,
    day_of_week VARCHAR(15),
    month INT,
    year INT,
    quarter INT
);

-- Sample Queries for Key Functionalities --

-- 1. Viewing available inventory
SELECT 
    i.item_name, 
    i.quantity_available, 
    i.unit_price, 
    f.farmer_name, 
    c.category_name 
FROM 
    Inventory i
JOIN Farmers f ON i.farmer_id = f.farmer_id
JOIN Categories c ON i.item_category = c.category_id
WHERE 
    i.quantity_available > 0;

-- 2. Placing an order
INSERT INTO Orders (buyer_id, farmer_id, item_id, order_date, quantity, total_price, order_status) 
VALUES (1, 2, 3, CURDATE(), 10, (SELECT unit_price FROM Inventory WHERE item_id = 3) * 10, 'Pending');

-- 3. Updating stock levels after an order
UPDATE Inventory
SET quantity_available = quantity_available - 10
WHERE item_id = 3;

-- 4. Generating reports: Orders by date and category
SELECT 
    o.order_id, 
    o.order_date, 
    b.buyer_name, 
    f.farmer_name, 
    i.item_name, 
    i.unit_price, 
    o.quantity, 
    o.total_price, 
    c.category_name 
FROM 
    Orders o
JOIN Buyers b ON o.buyer_id = b.buyer_id
JOIN Farmers f ON o.farmer_id = f.farmer_id
JOIN Inventory i ON o.item_id = i.item_id
JOIN Categories c ON i.item_category = c.category_id
WHERE 
    o.order_date BETWEEN '2024-01-01' AND '2024-12-31';
